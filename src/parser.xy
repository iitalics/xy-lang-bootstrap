;   #--------- error messages ---------#
let parse_expect (type, toks : (hd toks)::tok == type) =
	[ hd toks, tl toks ]
let .. (type, toks) =
	token_die(hd toks, "expected token '" + type + "', got '" + (hd toks)::tok + "'")
let parse_unexpect (tok) =
	token_die(tok, "unexpected token '" + tok::tok + "'")



use "src/parser-shunting_yard.xy"






;   #--------- expression parsing ---------#

let parse_exp (toks, ()) =
	with ([e, toks] = toks -> parse_single)
		parse_exp(toks, e -> syard_create)
let .. (toks : (hd toks)::tok -> token_is_binary?, syard) =
	with (op = (hd toks)::tok,
			[e, toks] = tl toks -> parse_single)
		parse_exp(toks, syard_push(syard, op, e))
let .. (toks, syard) =
	[syard -> syard_finish, toks]


use "src/parser-func.xy"
use "src/parser-lambda.xy"

let parse_single (toks) =
	with ([e, toks] = (hd toks)::tok -> @{
				let ("<number>") =
					[(hd toks) -> expression_number, tl toks]

				let ("<symbol>") =
					[(hd toks) -> expression_symbol, tl toks]

				let ("<string>") =
					[(hd toks) -> expression_string, tl toks]

				let ("(") =
					parse_single_paren(tl toks)
					
				let ("@") =
					parse_lambda(tl toks)
				
				let ("`") =
					parse_lambda_mini(tl toks)

				let (t : t == "true" or t == "false") =
					[expression_bool(hd toks), tl toks]

				let (t -> token_is_unary?) =
					with ([e, toks] = tl toks -> parse_single)
						[expression_unary(t, e), toks]

				let (bad) = parse_unexpect(hd toks)
			})
		parse_prologue(e, toks)
;

let parse_single_paren (toks : (hd toks)::tok == ")") =
	[expression_void(), tl toks]
let .. (toks) =
	with ([e, toks] = toks -> parse_exp)
	with ([_, toks] = parse_expect(")", toks))
		[e, toks]




; #----------- function call --------------#

let parse_func_call (toks : (hd toks)::tok == ")", func) =
	parse_func_call_finish(tl toks, func, [])
let .. (toks, func) =
	parse_func_call_iter(toks, func, [])
let parse_func_call_iter (toks, func, args) =
	with ([arg, toks] = toks -> parse_exp,
			args = args + [arg])
		((hd toks)::tok -> @{
			let (",") =
				parse_func_call_iter
			let (")") =
				parse_func_call_finish
			let () =
				token_die(hd toks, "expected ',' or ')', got '" + t::tok + "'") })
		(tl toks, func, args)
let parse_func_call_finish (toks, func, args) =
	[expression_call(func, args), toks]
;




; #--------- post-expression prologue ---------#

let parse_prologue (e, toks : (hd toks)::tok == "(") =
	with ([e, toks] = parse_func_call(tl toks, e, []))
		parse_prologue(e, toks)
let .. (e, toks) =
	[e, toks]







; #--------- environment parsing -------#

let parse_env (toks, env, last_name) =
	(hd toks)::tok -> @{
		let ("<eof>") = env

		let ("use") =
			with ([file_tok, toks] = parse_expect("<string>", tl toks))
			with (fname = file_tok::str, data = fread(fname,
					@(_) = _,
					@() = token_die(hd toks, "error opening file '" + fname + "'")))
			with (new_toks = lexer_create(data, fname) -> lexer_parse_all)
			with (env = parse_env(new_toks, env))
				parse_env(toks, env, last_name)

		let ("let") =
			with ([name, body, toks] = parse_declaration(toks, last_name))
			with (env = env_add(body, name, env))
				parse_env(toks, env, name)

		let () =
			parse_unexpect(hd toks) }



let expression_void () =
	{ constant = true, primitive = true,
	  eval = @() = [()],
	  compile = @(o, compiler) =
		["\txy_value_set_void(" + o + ");\n",
		compiler] }

let expression_number (tok) =
	{ constant = true, primitive = true,
	  eval = @() = [tok::num],
	  compile = @(o, compiler) =
		["\txy_value_set_number(" + o + ", " + (tok::num -> string) + ");\n",
		compiler] }


let expression_bool (tok) =
	with (b = (tok::tok == "true"))
		{ constant = true, primitive = true,
		  eval = @() = b,
		  compile = @(o, compiler) =
			["\t" +
				(b -> @{
					let (true)  = "xy_value_set_bool_true"
					let (false) = "xy_value_set_bool_false" })
				+ "(" + o + ");\n",
			compiler] }

let char_escape
	   ("\n") = "\\n"
let .. ("\r") = "\\r"
let .. ("\t") = "\t"
let .. ("\"") = "\\\""
let .. ("\\") = "\\\\"
let .. (c) = c

let str_escape ("", out) = out
let .. (str, out) =
	str_escape(tl str,
		out + char_escape(hd str))

let expression_string (tok) =
	{ constant = true, primitve = true,
	  eval = @() = tok::str,
	  compile = @(o, compiler) =
		["\txy_value_set_string_c(" + o + ", "
			; TODO: escape chars
			"\"" + str_escape(tok::str, "") + "\""
			");\n",
		compiler] }

;



let expression_const
	   (q -> number?) = { num = q } -> expression_number
let .. (q -> string?) = { str = q } -> expression_string
let .. (true) = { tok = "true" } -> expression_bool
let .. (false) = { tok = "false" } -> expression_bool
let .. (()) = expression_void()
let .. (q -> list?) =
	(q $ t = t -> expression_const) -> expression_list

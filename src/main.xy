use "src/util.xy"
use "src/lexer.xy"
use "src/compiler.xy"
use "src/functions.xy"
use "src/expression.xy"
use "src/parser.xy"


let version_info () = "version 0.4.3 beta (xy bootstrap)"
let compile_info () = "last modified: may 25, 2014"


let help_text () =
	"usage: xy INPUT_FILE [options]\n"
	"   -o FILE     choose output file (instead of stdout)\n"
	"   -t          enable tail calls (default)\n"
	"   -T          disable tail calls\n"
	"   --version   show version info\n"
	"   --help      show this help text"
;.

let version_text () =
	"xy to ansi c compiler\n"
	"| " + version_info() + "\n"
	"| " + compile_info()
;

let open_files (files) =
	foldl(@(all, file) = 
			fread(file,	
				@(src) = all + src,
				@() = die("error: could not open file '" + file + "'")),
		"", files)


let opt_empty () =
	{ input_files = [], output_file = (),
      tail_calls = true }
;
let opt_parse ([], opts) = opts
let .. (args, opts) =
	with ([args, opts] = hd args -> @{
			let ("--help") = die(help_text())
			let ("-h") = die(help_text())
			
			let ("--version") = die(version_text())
			
			let ("-o") =
				[tl tl args,
				opts + { output_file = hd tl args }]
			
			let ("-t") = [tl args, opts + { tail_calls = true }]
			let ("-T") = [tl args, opts + { tail_calls = false }]
			
			let (n) =
				[tl args,
				opts + { input_files = opts::input_files + [hd args] }] })
		opt_parse(args, opts)

let build (files, opts) =
	with (files_name = files -> length -> @{
		let (1) =
			hd files
		let (n) =
			"<multiple files>" })
	with (toks = lexer_create(files -> open_files, files_name) -> lexer_parse_all)
	with (env = parse_env(toks, []))
	with (compiler = compiler_make() + { opts = opts })
	with ([code, compiler] = env_compile(env, compiler))
	with (extern_code = compiler -> compiler_extern_code)
		("// compiler:  " + version_info() + "\n\n"
		 "#include <xy.h>\n\n" + 
		 extern_code + "\n\n" + code)
;


let build_write_output (code, opts : opts::input_files == []) =
	die("error: no input files")
let .. (code, opts : opts::output_file == ()) =
	code -> display
let .. (code, opts) =
	fwrite(opts::output_file,
		@() = code,
		@{ let (false) = die("error: could not open file '" + opts::output_file + "'")
		   let (true) = () })


let main ([]) = help_text() -> display_ln
let .. (args) =
	try(@() =
			with (opts = opt_parse(args, opt_empty()))
				build_write_output(build(opts::input_files, opts), opts),
		display_ln)